<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>计算机体系结构</title>
      <link href="2020/10/04/ji-suan-ji-ti-xi-jie-gou/"/>
      <url>2020/10/04/ji-suan-ji-ti-xi-jie-gou/</url>
      
        <content type="html"><![CDATA[<h1 id="计算体系结构–存储系统"><a href="#计算体系结构–存储系统" class="headerlink" title="计算体系结构–存储系统"></a>计算体系结构–存储系统</h1><h2 id="1-存储体系概述"><a href="#1-存储体系概述" class="headerlink" title="1.存储体系概述"></a>1.存储体系概述</h2><h3 id="1-1存储器分类"><a href="#1-1存储器分类" class="headerlink" title="1.1存储器分类"></a>1.1存储器分类</h3><h4 id="主存"><a href="#主存" class="headerlink" title="主存"></a>主存</h4><p>地位：<strong>在现代计算机中，主存储器处于全机的中心地位。</strong></p><p>分类：</p><pre><code>- RAM</code></pre><ul><li>ROM<pre><code>- MROM   - PROM- EPROM- EEPROM</code></pre><ul><li>Flash memory 必须以块片页的方式擦写，写入速度比EEPROM高三个数量级以上</li></ul></li></ul><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.assets/image-20201004223533373.png" alt="image-20201004223533373"></p><h3 id="1-2储存器性能指标"><a href="#1-2储存器性能指标" class="headerlink" title="1.2储存器性能指标"></a>1.2储存器性能指标</h3><h4 id="储存容量"><a href="#储存容量" class="headerlink" title="储存容量"></a>储存容量</h4><p>二进制位（bit）是构成存储器的最小单位</p><p><strong>字节（**</strong>byte**<strong>）是数据存储的**</strong>基本单位**</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.assets/image-20201004223831841.png" alt="image-20201004223831841"></p><h4 id="储存速度"><a href="#储存速度" class="headerlink" title="储存速度"></a>储存速度</h4><p>存取时间</p><p><strong>指启动一次存储器操作到完成该操作所需的全部时间</strong></p><p>存储周期</p><p><strong>指存储器进行连续两次独立的存储器操作所需的最小间隔时间</strong></p><p><strong>通常存储周期大于存取时间</strong></p><p>存储器带宽</p><p><strong>是单位时间里存储器所能存取的最大信息量，存储器带宽的计量单位通常是位**</strong>/秒（bps）或字节/秒**</p><h3 id="1-3存储器层次结构"><a href="#1-3存储器层次结构" class="headerlink" title="1.3存储器层次结构"></a>1.3存储器层次结构</h3><h2 id="2-主储存器"><a href="#2-主储存器" class="headerlink" title="2.主储存器"></a>2.主储存器</h2><h3 id="2-1主储存器与CPU的连接"><a href="#2-1主储存器与CPU的连接" class="headerlink" title="2.1主储存器与CPU的连接"></a>2.1主储存器与CPU的连接</h3><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.assets/image-20201004224910485.png" alt="image-20201004224910485"></p><p>分类 RAM，ROM，高性能的主存储器</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.assets/image-20201004225141220.png" alt="image-20201004225141220"></p><h4 id="静态存储器SRAM"><a href="#静态存储器SRAM" class="headerlink" title="静态存储器SRAM"></a>静态存储器SRAM</h4><h5 id="1-SRAM存储位元"><a href="#1-SRAM存储位元" class="headerlink" title="(1)SRAM存储位元"></a>(1)SRAM存储位元</h5><h5 id="2-SRAM存储器"><a href="#2-SRAM存储器" class="headerlink" title="(2)SRAM存储器"></a>(2)SRAM存储器</h5><p>地址译码方式</p><p>一维地址译码方向</p><img src="计算机体系结构.assets/image-20201004233505018.png" alt="image-20201004233505018" style="zoom:80%;" /><p>双向译码方式</p><img src="计算机体系结构.assets/image-20201004233709071.png" alt="image-20201004233709071" style="zoom:80%;" /><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.assets/image-20201004233855805.png" alt="image-20201004233855805"></p><p>A 地址总线    D或I/O 数据总线    CS chip select 片选线        WE write enable 写使能 </p><h5 id="3-SRAM存储器的特点"><a href="#3-SRAM存储器的特点" class="headerlink" title="(3)SRAM存储器的特点"></a>(3)SRAM存储器的特点</h5><p><strong>电源不掉电**</strong>的情况下，信息稳定保持（静态）**</p><p>存取速度快，集成度低（容量小），价格高。</p><p><strong>常用作高速缓冲存储器</strong></p><h4 id="动态存储器DRAM"><a href="#动态存储器DRAM" class="headerlink" title="动态存储器DRAM"></a>动态存储器DRAM</h4><h5 id="DRAM存储位元"><a href="#DRAM存储位元" class="headerlink" title="DRAM存储位元"></a>DRAM存储位元</h5><h5 id="DRAM存储器"><a href="#DRAM存储器" class="headerlink" title="DRAM存储器"></a>DRAM存储器</h5><h5 id="DRAM刷新方式"><a href="#DRAM刷新方式" class="headerlink" title="DRAM刷新方式"></a>DRAM刷新方式</h5><p>异步式刷新</p><h5 id="DRAM存储器特点"><a href="#DRAM存储器特点" class="headerlink" title="DRAM存储器特点"></a>DRAM存储器特点</h5><img src="计算机体系结构.assets/image-20201005074511533.png" alt="image-20201005074511533" style="zoom:50%;" /><p>常作为内存条</p><h4 id="SRAM与DRAM的比较"><a href="#SRAM与DRAM的比较" class="headerlink" title="SRAM与DRAM的比较"></a>SRAM与DRAM的比较</h4><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.assets/image-20201005074656805.png" alt="image-20201005074656805"></p><h3 id="2-2高速存储器"><a href="#2-2高速存储器" class="headerlink" title="2.2高速存储器"></a>2.2高速存储器</h3><h3 id="2-3高速缓存存储器"><a href="#2-3高速缓存存储器" class="headerlink" title="2.3高速缓存存储器"></a>2.3高速缓存存储器</h3><h3 id="2-4虚拟存储器"><a href="#2-4虚拟存储器" class="headerlink" title="2.4虚拟存储器"></a>2.4虚拟存储器</h3><h3 id="2-5外存储器"><a href="#2-5外存储器" class="headerlink" title="2.5外存储器"></a>2.5外存储器</h3>]]></content>
      
      
      <categories>
          
          <category> 计算机基础课程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
            <tag> 课程 </tag>
            
            <tag> 复习笔记 </tag>
            
            <tag> 计算机体系结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译原理</title>
      <link href="2020/10/03/bian-yi-yuan-li/"/>
      <url>2020/10/03/bian-yi-yuan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="编译原理"><a href="#编译原理" class="headerlink" title="编译原理"></a>编译原理</h1><h2 id="1-编译原理概论"><a href="#1-编译原理概论" class="headerlink" title="1 编译原理概论"></a>1 编译原理概论</h2><h3 id="1-1-什么是编译程序"><a href="#1-1-什么是编译程序" class="headerlink" title="1.1 什么是编译程序"></a>1.1 什么是编译程序</h3><h4 id="1-编译程序"><a href="#1-编译程序" class="headerlink" title="1 编译程序"></a>1 编译程序</h4><p><img src="%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86.assets/image-20201003171100679.png" alt="alt"></p><p>source program to object program</p><h4 id="2-解释器-interpreter-与编译器-compiler"><a href="#2-解释器-interpreter-与编译器-compiler" class="headerlink" title="2 解释器(interpreter)与编译器(compiler)"></a>2 解释器(interpreter)与编译器(compiler)</h4><p><img src="%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86.assets/image-20201003171358672.png" alt="image-20201003171358672"></p><p>解释器是源程序的执行系统。</p><p>编译器是源程序的转换系统。</p><h4 id="3-JIT（Just-Intime-Compiler）编译器"><a href="#3-JIT（Just-Intime-Compiler）编译器" class="headerlink" title="3 JIT（Just Intime Compiler）编译器"></a>3 JIT（Just Intime Compiler）编译器</h4><p>JIT是动态编译器的一种。Java程序一开始是通过<strong>解释器</strong>进行<strong>解释执行</strong>的。当JVM会把频繁执行的代码或方法认定为<strong>热点代码（Hot Spot Code）</strong>，然后JVM会把这些代码编译成与本地平台相关的机器码，并进行各种层次的优化。</p><h4 id="4-高级语言编译过程"><a href="#4-高级语言编译过程" class="headerlink" title="4 高级语言编译过程"></a>4 高级语言编译过程</h4><p><img src="%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86.assets/image-20201003171742627.png" alt="image-20201003171742627"></p><h3 id="1-2-编译过程概述"><a href="#1-2-编译过程概述" class="headerlink" title="1.2 编译过程概述"></a>1.2 编译过程概述</h3><h4 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h4><p><img src="%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86.assets/image-20201003171845957.png"></p><h4 id="词法分析（lexical-analysis-or-scanning）"><a href="#词法分析（lexical-analysis-or-scanning）" class="headerlink" title="词法分析（lexical analysis or scanning）"></a>词法分析（lexical analysis or scanning）</h4><p>任务：从左到右一个字符一个字符地读入源程序，对构成源程序的字符流进行扫描和分解，从而识别出一个个<strong>单词(Token)**。单词表示成</strong>二元式（单词的种别，单词自身值）**</p><h4 id="语法分析-syntax-analysis-or-parsing"><a href="#语法分析-syntax-analysis-or-parsing" class="headerlink" title="语法分析(syntax analysis or parsing)"></a>语法分析(syntax analysis or parsing)</h4><p><img src="%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86.assets/image-20201003173157150.png" alt="image-20201003173157150"></p><h3 id="1-3-编译程序的结构"><a href="#1-3-编译程序的结构" class="headerlink" title="1.3 编译程序的结构"></a>1.3 编译程序的结构</h3><h3 id="1-4-编译阶段的组合"><a href="#1-4-编译阶段的组合" class="headerlink" title="1.4 编译阶段的组合"></a>1.4 编译阶段的组合</h3><h3 id="1-5-编译技术和软件工具"><a href="#1-5-编译技术和软件工具" class="headerlink" title="1.5 编译技术和软件工具"></a>1.5 编译技术和软件工具</h3><h2 id="2-文法与语言"><a href="#2-文法与语言" class="headerlink" title="2 文法与语言"></a>2 文法与语言</h2><h2 id="3-词法分析"><a href="#3-词法分析" class="headerlink" title="3 词法分析"></a>3 词法分析</h2><h2 id="4-语法分析—-自上而下分析"><a href="#4-语法分析—-自上而下分析" class="headerlink" title="4 语法分析—-自上而下分析"></a>4 语法分析—-自上而下分析</h2><p>面对的问题：左递归和回溯</p><h3 id="LL-1-分析法"><a href="#LL-1-分析法" class="headerlink" title="LL(1)分析法"></a>LL(1)分析法</h3><h5 id="LL-1-分析准备"><a href="#LL-1-分析准备" class="headerlink" title="LL(1)分析准备"></a>LL(1)分析准备</h5><h6 id="左递归的消除"><a href="#左递归的消除" class="headerlink" title="左递归的消除"></a>左递归的消除</h6><ol><li>直接左递归</li><li>间接左递归</li></ol><p>间接左递归代入转为直接左递归。间接左递归中不同代入顺序会有不同结果。</p><p>引入新的非终结符直接左递归变右递归。</p><img src="编译原理.assets/image-20201003180915680.png" alt="image-20201003180915680" style="zoom:50%;" /><img src="编译原理.assets/image-20201003180849426.png" alt="image-20201003180849426" style="zoom:50%;" /><p>消除左递归后注意删除那些永远无法到达的产生规则。</p><h6 id="提取左公因子"><a href="#提取左公因子" class="headerlink" title="提取左公因子"></a>提取左公因子</h6><p>若A→αβ1|αβ2|…|αβn，提取左公共因子后变为A→αA’，A’→ β1|β2|…|βn</p><h5 id="LL-1-文法"><a href="#LL-1-文法" class="headerlink" title="LL(1)文法"></a>LL(1)文法</h5><h6 id="开始符号集"><a href="#开始符号集" class="headerlink" title="开始符号集"></a>开始符号集</h6><p>可以包含空字。  </p><h6 id="后继符合集"><a href="#后继符合集" class="headerlink" title="后继符合集"></a>后继符合集</h6><p>不包含空字。</p><p>注意开始符合的后跟符号集一定有#（‘#’做为输入串的结束符）</p><h6 id="选择符号集"><a href="#选择符号集" class="headerlink" title="选择符号集"></a>选择符号集</h6><p><img src="%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86.assets/image-20201003182246388.png" alt="image-20201003182246388"></p><h5 id="LL-1-文法定义"><a href="#LL-1-文法定义" class="headerlink" title="LL(1)文法定义"></a>LL(1)文法定义</h5><p><img src="%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86.assets/image-20201003182410196.png" alt="image-20201003182410196"></p><h3 id="递归下降分析程序构造"><a href="#递归下降分析程序构造" class="headerlink" title="递归下降分析程序构造"></a>递归下降分析程序构造</h3><h3 id="预测分析程序"><a href="#预测分析程序" class="headerlink" title="预测分析程序"></a>预测分析程序</h3>]]></content>
      
      
      <categories>
          
          <category> 计算机基础课程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编译原理 </tag>
            
            <tag> 计算机基础 </tag>
            
            <tag> 课程 </tag>
            
            <tag> 复习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++大作业--XXX管理程序</title>
      <link href="2020/10/02/c-da-zuo-ye/"/>
      <url>2020/10/02/c-da-zuo-ye/</url>
      
        <content type="html"><![CDATA[<p>理工科大一往往会学习C/C++，期末会有大作业。这篇文章就是一个简单的C++大作业程序。我也是大一，所以觉着哪里写得不好欢迎在评论区提出。程序总体上讲是个“总分总”结构。</p><h2 id="一-实现这个程序要八步。"><a href="#一-实现这个程序要八步。" class="headerlink" title="一  实现这个程序要八步。"></a><strong>一  实现这个程序要八步。</strong></h2><h2 id="第一步-程序的功能设计"><a href="#第一步-程序的功能设计" class="headerlink" title="第一步 程序的功能设计"></a><strong>第一步 程序的功能设计</strong></h2><p>程序的目标有两个。一是辅助我备考四六级，帮助生活和提高效率。二是提供一些娱乐活动。</p><p>针对这两个目标，我设计了六个功能—单词助手、计划待办、密码库、聊天室、3D坦克大战、趣味围棋。</p><p>其中单词助手、计划待办、密码库为备考四六级和提高账户管理效率而做的。聊天室、趣味围棋和3D坦克大战是为娱乐而设计的。</p><p>以下分别通过图片展示</p><p><img src="https://pic4.zhimg.com/v2-b031d023781ced2b5571bff1c131c0cf_b.png" alt="img"></p><p>想出一个复杂的密码和账户总是非常麻烦，要记住密码就更麻烦了。而简单的密码也不安全。这部分功能就可以解决这个问题。</p><p><img src="https://pic4.zhimg.com/v2-b637b6e194b42e90e019b7f04c509b43_b.png" alt="img"></p><p>计划本。因为我经常忘事情所以需要个计划本。（PS：不过我觉着计划还是记了纸上更有效）</p><p><img src="https://pic3.zhimg.com/v2-3d358ebc50b2bc585fdd1c1944ab3e76_b.png" alt="img"></p><p>单词本，是为了9月的四级考试而准备的。</p><p><img src="https://pic1.zhimg.com/v2-1cd02b82e61927b78234fb6ccf97d21c_b.png" alt="img"></p><p>趣味围棋，我是围棋两段来着。现在还经常看看围棋视频。不过棋力不行了。另外这个程序的提子，数气，判断胜负之类的都没做，应该说是个五子棋比较合适。以后再完善，现在就这样吧。</p><p><img src="https://pic3.zhimg.com/v2-7d835cd53db1edd1b6d573421f5fe822_b.png" alt="img"></p><p>聊天室，本来想做进行安全加密的聊天室，然后可以在外网联络的那种。但是时间不够。所以只是一个简单的聊天室。</p><p><img src="https://pic2.zhimg.com/v2-1bc9014d46b0e05b1470b38bd7ec6c3d_b.png" alt="img"></p><p> 这个是我用unity做的游戏。动画、模型、声音来自unity官方教程。我也是照着教程来的。PS：期间我还尝试过UE4开发游戏，不过时间不够没有做出一个比较好的作品。Unity是C#，UE4是C++。不知道C#的可不可以交C++的作业。</p><p>功能很杂是因为把一些以前的程序也整合了整合放进去了，所以有点不伦不类。</p><p><img src="https://pic2.zhimg.com/v2-2ea40190aa7fe2464864b1f259f8b315_b.png" alt="img"></p><p>这个程序的部分文件</p><p>其实上图的文件只能实现前四个功能，后两个功能是直接调用了一些以前写的程序来完成的。分开是因为聊天室功能还要分成客户端和服务端，不方便弄成一个，而3D坦克大战是用Unity做的游戏，放不进去。</p><h2 id="第二步-搭好基础设施"><a href="#第二步-搭好基础设施" class="headerlink" title="第二步 搭好基础设施"></a>第二步 搭好基础设施</h2><p>对于前三个功能，我们可以看到都属于增删改查类型的，所以考虑先设计一个类模板，提供共同的操作，这样不管是扩展程序，deBug还是写程序都会简单很多。然后本着练习的原则，没有选择STL，而是自己做一个链表模板。</p><p>下面是链表模板的介绍（list.h）。</p><p>首先是节点Node类，这里为了方便写代码所以用的双向的。单向的实现一些功能会更麻烦。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    Node<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">*</span> next<span class="token punctuation">;</span>    Node<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">*</span> prev<span class="token punctuation">;</span>    T content<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Node</span><span class="token punctuation">(</span>T content<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        next <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        prev <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>content <span class="token operator">=</span> content<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        next <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        prev <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><p>接着是List类了，需要注意的是类模板声明和定义最好都写在一起。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//remove()要求超载==</span><span class="token comment" spellcheck="true">//</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">List</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    Node<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">*</span> head<span class="token punctuation">;</span>    Node<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">*</span> tail<span class="token punctuation">;</span>    <span class="token keyword">int</span> length<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//链表中节点个数，默认构造的链表长度为0。</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        head <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        tail <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"空链表"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//从尾删到头</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>tail <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Node<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">*</span> temp <span class="token operator">=</span> tail<span class="token punctuation">;</span>            tail <span class="token operator">=</span> tail<span class="token operator">-</span><span class="token operator">></span>prev<span class="token punctuation">;</span>            temp<span class="token operator">-</span><span class="token operator">></span>prev <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>            <span class="token keyword">delete</span> temp<span class="token punctuation">;</span>            length<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//cout &lt;&lt; "length=" &lt;&lt; length &lt;&lt; endl;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//list的基本操作</span>    <span class="token keyword">void</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">const</span> T content<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//分两种情况，链表为空时与链表非空时   </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            head <span class="token operator">=</span> <span class="token keyword">new</span> Node<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>            tail <span class="token operator">=</span> head<span class="token punctuation">;</span>            length <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Node<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">*</span> temp <span class="token operator">=</span> tail<span class="token punctuation">;</span>            tail<span class="token operator">=</span><span class="token keyword">new</span> Node<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>            temp<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> tail<span class="token punctuation">;</span>            tail<span class="token operator">-</span><span class="token operator">></span>prev <span class="token operator">=</span> temp<span class="token punctuation">;</span>            length<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">const</span> T content<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"空链表"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//从尾开始找，一直找到头</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">*</span> temp <span class="token operator">=</span> tail<span class="token punctuation">;</span> temp <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span> temp <span class="token operator">=</span> temp<span class="token operator">-</span><span class="token operator">></span>prev<span class="token punctuation">)</span>         <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token operator">-</span><span class="token operator">></span>content <span class="token operator">==</span> content<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//要求重载==</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">//分三种情况，删头结点，删中间节点，删尾节点 </span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">==</span> tail<span class="token punctuation">)</span>                <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    tail <span class="token operator">=</span> tail<span class="token operator">-</span><span class="token operator">></span>prev<span class="token punctuation">;</span>                    temp<span class="token operator">-</span><span class="token operator">></span>prev <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>tail <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//由于tail前移了一次没有检查，所以此处来检查</span>                    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        tail<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                    <span class="token keyword">delete</span> temp<span class="token punctuation">;</span>                    length<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//每次删除和添加都要注意。</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">==</span> head<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    head <span class="token operator">=</span> head<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>                    temp<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>                    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        head<span class="token operator">-</span><span class="token operator">></span>prev <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                    <span class="token keyword">delete</span> temp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//此处误写成head导致析构时发生BUG</span>                    length<span class="token operator">--</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    temp<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>prev <span class="token operator">=</span> temp<span class="token operator">-</span><span class="token operator">></span>prev<span class="token punctuation">;</span>                    temp<span class="token operator">-</span><span class="token operator">></span>prev<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> temp<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>                    temp<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>                    temp<span class="token operator">-</span><span class="token operator">></span>prev <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>                    <span class="token keyword">delete</span> temp<span class="token punctuation">;</span>                    length<span class="token operator">--</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//remove()没有对index进行上下界的检查，过程中可能返回nullptr使用时要注意。</span>    <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"空链表"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//下面这部分删除直接调用remove(temp->content); 会更加简洁</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">==</span> tail<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            tail <span class="token operator">=</span> tail<span class="token operator">-</span><span class="token operator">></span>prev<span class="token punctuation">;</span>            temp<span class="token operator">-</span><span class="token operator">></span>prev <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tail <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                tail<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">delete</span> temp<span class="token punctuation">;</span>            length<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">==</span> head<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            head <span class="token operator">=</span> head<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            temp<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                head<span class="token operator">-</span><span class="token operator">></span>prev <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">delete</span> temp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//此处误写成head导致析构时发生BUG</span>            length<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            temp<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>prev <span class="token operator">=</span> temp<span class="token operator">-</span><span class="token operator">></span>prev<span class="token punctuation">;</span>            temp<span class="token operator">-</span><span class="token operator">></span>prev<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> temp<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            temp<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>            temp<span class="token operator">-</span><span class="token operator">></span>prev <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>            <span class="token keyword">delete</span> temp<span class="token punctuation">;</span>            length<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//先删后加==修改</span>    <span class="token keyword">void</span> <span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">const</span> T oldContent<span class="token punctuation">,</span> <span class="token keyword">const</span> T newContent<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"空链表"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">remove</span><span class="token punctuation">(</span>oldContent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">append</span><span class="token punctuation">(</span>newContent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">const</span> T newContent<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"空链表"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">remove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">append</span><span class="token punctuation">(</span>newContent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"空链表"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>content<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">resPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"空链表"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>content<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    Node<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">*</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//index=0是头节点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"空链表"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">*</span> temp <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> index <span class="token operator">&amp;&amp;</span> temp <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            temp <span class="token operator">=</span> temp<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> temp<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    Node<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">*</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">const</span> T content<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"空链表"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">*</span> temp <span class="token operator">=</span> tail<span class="token punctuation">;</span> temp <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span> temp <span class="token operator">=</span> temp<span class="token operator">-</span><span class="token operator">></span>prev<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token operator">-</span><span class="token operator">></span>content <span class="token operator">==</span> content<span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> temp<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"没有找到"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> length<span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//list的文件操作(save会覆盖原文件，所以最好自动加载)</span>    <span class="token keyword">void</span> <span class="token function">saveDatFile</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> fileName <span class="token operator">=</span> <span class="token string">"listFile.dat"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        T tempContent<span class="token punctuation">;</span>        ofstream <span class="token function">outFile</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> ios<span class="token operator">::</span>out <span class="token operator">|</span> ios<span class="token operator">::</span>binary<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            tempContent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>            outFile<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>tempContent<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>tempContent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        outFile<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">loadDatFile</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> fileName <span class="token operator">=</span> <span class="token string">"listFile.dat"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        T tempContent<span class="token punctuation">;</span>        ifstream <span class="token function">inFile</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> ios<span class="token operator">::</span>in <span class="token operator">|</span> ios<span class="token operator">::</span>binary<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inFile<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"打开文件失败"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>inFile<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>tempContent<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>tempContent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">append</span><span class="token punctuation">(</span>tempContent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">initialDatFile</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> fileName <span class="token operator">=</span> <span class="token string">"listFile.dat"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ofstream <span class="token function">outFile</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> ios<span class="token operator">::</span>out <span class="token operator">|</span> ios<span class="token operator">::</span>binary<span class="token punctuation">)</span><span class="token punctuation">;</span>        outFile<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">exportTxtFile</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> datFileName <span class="token operator">=</span> <span class="token string">"listFile.dat"</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> txtFileName <span class="token operator">=</span> <span class="token string">"listFile.txt"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        T tempContent<span class="token punctuation">;</span>        ifstream <span class="token function">inFile</span><span class="token punctuation">(</span>datFileName<span class="token punctuation">,</span> ios<span class="token operator">::</span>in <span class="token operator">|</span> ios<span class="token operator">::</span>binary<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inFile<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"打开文件失败"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>inFile<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>tempContent<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>tempContent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//导出Txt未完成</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//运算符重载，方便作为可增长的向量使用，暂时没有用。</span>    T<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><p>这样第一个文件”list.h”就OK了。有了类模板作为基础设施，之后的工作就十分简单了。</p><h2 id="第三步-设置各个独立的上层建筑"><a href="#第三步-设置各个独立的上层建筑" class="headerlink" title="第三步 设置各个独立的上层建筑"></a>第三步 设置各个独立的上层建筑</h2><p>上层建筑是指三个类。Password类，Word类，Plan类</p><p>下面是Password类</p><p>“password.h”</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4996)</span><span class="token macro property">#<span class="token directive keyword">pragma</span> once</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;ctime></span></span><span class="token comment" spellcheck="true">//可能不需要包含它</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"common.h"</span></span><span class="token keyword">class</span> <span class="token class-name">Password</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">char</span> username<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> password<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> url<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> tag<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> localDate<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//strlen显示大小是4，但多次实验发现实际大小是26，很奇怪。为保险起见，使用大小是30，</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">setLocalDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        time_t now <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//当前系统的当前日期/时间</span>        <span class="token keyword">char</span><span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token function">ctime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//把 now 转换为字符串形式ctime(&amp;now);</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>localDate<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            password<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">randomKind</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        password<span class="token punctuation">[</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"账号名称："</span><span class="token punctuation">;</span>        cin <span class="token operator">>></span> username<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"相关网址："</span><span class="token punctuation">;</span>        cin <span class="token operator">>></span> url<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"此次随机的密码："</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> password <span class="token operator">&lt;&lt;</span> <span class="token string">"  "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"位"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"1重来一次 2自定义 3退出"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">char</span> choice<span class="token punctuation">;</span>            cin <span class="token operator">>></span> choice<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>choice <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> password <span class="token operator">&lt;&lt;</span> <span class="token string">"  "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"位"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                <span class="token function">setLocalDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>choice <span class="token operator">==</span> <span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                cin <span class="token operator">>></span> password<span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> password <span class="token operator">&lt;&lt;</span> <span class="token string">"  "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"位"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                <span class="token function">setLocalDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>choice <span class="token operator">==</span> <span class="token string">'3'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请选择"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"选择标签：1课内学习 2课外学习 3学校账户 4娱乐账户 5其它账户"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"其他选择跳过该步骤"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">char</span> choice<span class="token punctuation">;</span>            cin <span class="token operator">>></span> choice<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>choice <span class="token operator">&lt;=</span> <span class="token string">'5'</span> <span class="token operator">&amp;&amp;</span> choice <span class="token operator">>=</span> <span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                tag<span class="token punctuation">[</span>choice <span class="token operator">-</span> <span class="token string">'1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"=====================账户==================="</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"用户名："</span> <span class="token operator">&lt;&lt;</span> username <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"密码："</span> <span class="token operator">&lt;&lt;</span> password <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"URL："</span> <span class="token operator">&lt;&lt;</span> url <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"日期："</span> <span class="token operator">&lt;&lt;</span> localDate <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"============================================"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">friend</span> ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span> output<span class="token punctuation">,</span> Password cipher<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">friend</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span>Password password1<span class="token punctuation">,</span> Password password2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//随机函数，这些函数都是为上面的函数服务，没必要看。</span>    <span class="token keyword">char</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> min<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> max<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> min<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token function">randomNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token function">randomUpperLetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token function">randomLowerLetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">122</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token function">randomSymbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token function">randomKind</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">bool</span> flag<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//无符号</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> choice<span class="token punctuation">;</span>            choice <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>choice <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token function">randomNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>choice <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token function">randomLowerLetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token function">randomUpperLetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> choice<span class="token punctuation">;</span>            choice <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>choice <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token function">randomNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>choice <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token function">randomLowerLetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>choice <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token function">randomUpperLetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token function">randomSymbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//账户管理部分的菜单界面</span><span class="token keyword">void</span> <span class="token function">passwordMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//文件加密和解密函数</span><span class="token keyword">void</span> <span class="token function">encryption</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>“password.cpp”</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"plan.h"</span></span>ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span> output<span class="token punctuation">,</span> Plan plan<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    plan<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> output<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span>Plan plan1<span class="token punctuation">,</span> Plan plan2<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>plan1<span class="token punctuation">.</span>title<span class="token punctuation">,</span> plan2<span class="token punctuation">.</span>title<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">planMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Plan plan<span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Plan<span class="token operator">></span> listOfPlan<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> planFileDat <span class="token operator">=</span> <span class="token string">"d:\\planFile.dat"</span><span class="token punctuation">;</span>    listOfPlan<span class="token punctuation">.</span><span class="token function">loadDatFile</span><span class="token punctuation">(</span>planFileDat<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"CLS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> choice<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"=======计划======="</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"1.添加计划/待办"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"2.保存计划/待办"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"3.浏览所有计划/待办"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"4.导出计划记录本(未完成)"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"5.查找计划/待办"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"6.删除计划"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"7.修改计划"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Q.退出"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cin <span class="token operator">>></span> choice<span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>choice<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'1'</span><span class="token operator">:</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            plan<span class="token punctuation">.</span><span class="token function">setAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            listOfPlan<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>plan<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'2'</span><span class="token operator">:</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            listOfPlan<span class="token punctuation">.</span><span class="token function">saveDatFile</span><span class="token punctuation">(</span>planFileDat<span class="token punctuation">)</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"保存完成"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'3'</span><span class="token operator">:</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">char</span> ans<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入1，正序输出     输入2，倒序输出"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            cin <span class="token operator">>></span> ans<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ans <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                listOfPlan<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                listOfPlan<span class="token punctuation">.</span><span class="token function">resPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'4'</span><span class="token operator">:</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'5'</span><span class="token operator">:</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            plan<span class="token punctuation">.</span><span class="token function">setAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>listOfPlan<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>plan<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"没有找到"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                <span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> listOfPlan<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>plan<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>content<span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'6'</span><span class="token operator">:</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"1按序号删除计划   2按单词中英文删除"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">char</span> choice<span class="token punctuation">;</span>            cin <span class="token operator">>></span> choice<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>choice <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入序号："</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> i<span class="token punctuation">;</span>                cin <span class="token operator">>></span> i<span class="token punctuation">;</span>                listOfPlan<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>choice <span class="token operator">==</span> <span class="token string">'2'</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                plan<span class="token punctuation">.</span><span class="token function">setAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                listOfPlan<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>plan<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"退出"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'7'</span><span class="token operator">:</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"1按序号修改计划   2按单词中英文修改"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">char</span> choice<span class="token punctuation">;</span>            cin <span class="token operator">>></span> choice<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>choice <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入序号："</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> i<span class="token punctuation">;</span>                cin <span class="token operator">>></span> i<span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入新的计划"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                plan<span class="token punctuation">.</span><span class="token function">setAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                listOfPlan<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> plan<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>choice <span class="token operator">==</span> <span class="token string">'2'</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入要修改的计划"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                plan<span class="token punctuation">.</span><span class="token function">setAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入新的计划"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                Plan newPlan<span class="token punctuation">;</span>                newPlan<span class="token punctuation">.</span><span class="token function">setAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                listOfPlan<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>plan<span class="token punctuation">,</span> newPlan<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"退出"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'q'</span><span class="token operator">:</span>        <span class="token keyword">case</span> <span class="token string">'Q'</span><span class="token operator">:</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//退出前调用结束模块</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请选择"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>Word类，这个类直接迁移自我以前写的程序，所以一些没用到的数据成员其实是懒得改了。功能上做了很多简化，大家有兴趣可以接着完善之类的。按理说声明和定义最好分开，不过因为分开写麻烦所以就没分了。。。。</p><p>“word.h”</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">pragma</span> once</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> LengthOfWord</span><span class="token macro property">#<span class="token directive keyword">define</span> LengthOfWord 30</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">ifndef</span> LengthOfTag</span><span class="token macro property">#<span class="token directive keyword">define</span> LengthOfTag 5</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"common.h"</span></span><span class="token keyword">class</span> <span class="token class-name">Word</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">char</span> english<span class="token punctuation">[</span>LengthOfWord<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> chinese<span class="token punctuation">[</span>LengthOfWord <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> isRemember<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">/*0,1,2*/</span>    <span class="token keyword">int</span> tag<span class="token punctuation">[</span>LengthOfTag<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*最多五个标签*/</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//show()是听写输出</span>    <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"英语："</span> <span class="token operator">&lt;&lt;</span> english <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"汉语："</span> <span class="token operator">&lt;&lt;</span> chinese <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入英语单词"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cin <span class="token operator">>></span> english<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*以后还要完善输入检查和限制读入字符数*/</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入汉语释义"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cin <span class="token operator">>></span> chinese<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*以后还要完善输入检查和限制读入字符数*/</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"CLS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"选择单词标签"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"1.学习\t2.考试\t3日常"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"4.重要\t5.四六级\t6.选完了"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            cin <span class="token operator">>></span> t<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> t <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                tag<span class="token punctuation">[</span>t <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*以后改成bool[5]会更好,用非来实现重复选取消*/</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"设置完成"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"CLS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//友元函数</span>    <span class="token keyword">friend</span> istream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">>></span><span class="token punctuation">(</span>istream<span class="token operator">&amp;</span> input<span class="token punctuation">,</span> Word<span class="token operator">&amp;</span> word<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">friend</span> ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span> output<span class="token punctuation">,</span> Word<span class="token operator">&amp;</span> word<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//非听写输出</span>    <span class="token keyword">friend</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span>Word word1<span class="token punctuation">,</span> Word word2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>istream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">>></span><span class="token punctuation">(</span>istream<span class="token operator">&amp;</span> input<span class="token punctuation">,</span> Word<span class="token operator">&amp;</span> word<span class="token punctuation">)</span><span class="token punctuation">;</span>ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span> output<span class="token punctuation">,</span> Word<span class="token operator">&amp;</span> word<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span>Word word1<span class="token punctuation">,</span> Word word2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">wordMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>“word.cpp”</p><pre><code>#include &quot;word.h&quot;istream&amp; operator&gt;&gt;(istream&amp; input, Word&amp; word)&#123;    word.setAll();    return input;&#125;//非听写输出 -OK ostream&amp; operator&lt;&lt;(ostream&amp; output, Word&amp; word)&#123;    output &lt;&lt; &quot;英语：&quot; &lt;&lt; word.english &lt;&lt; endl;    output &lt;&lt; &quot;汉语：&quot; &lt;&lt; word.chinese &lt;&lt; endl;    return output;&#125;bool operator==(Word word1, Word word2)&#123;    return (strcmp(word1.english,word2.english)==0)||(strcmp(word1.chinese, word2.chinese) == 0);&#125;void wordMenu() &#123;    Word word;    List&lt;Word&gt; listOfWord;    const char* wordFileDat = &quot;d:\\wordFile.dat&quot;;    listOfWord.loadDatFile(wordFileDat);    while (1)    &#123;        system(&quot;CLS&quot;);        char choice;        cout &lt;&lt; &quot;=======单词学习=======&quot; &lt;&lt; endl;        cout &lt;&lt; &quot;1.添加单词&quot; &lt;&lt; endl;        cout &lt;&lt; &quot;2.保存单词表&quot; &lt;&lt; endl;        cout &lt;&lt; &quot;3.浏览所有单词&quot; &lt;&lt; endl;        cout &lt;&lt; &quot;4.导出单词本(未完成)&quot; &lt;&lt; endl;        cout &lt;&lt; &quot;5.查找单词&quot; &lt;&lt; endl;        cout &lt;&lt; &quot;6.删除单词&quot; &lt;&lt; endl;        cout &lt;&lt; &quot;7.修改单词&quot; &lt;&lt; endl;        cout &lt;&lt; &quot;Q.退出&quot; &lt;&lt; endl;        cin &gt;&gt; choice;        switch (choice)        &#123;        case &#39;1&#39;:        &#123;            cout &lt;&lt; &quot;默认密码长度为20&quot; &lt;&lt; endl;            word.setAll();            listOfWord.append(word);            system(&quot;pause&quot;);            break;        &#125;        case &#39;2&#39;:        &#123;            listOfWord.saveDatFile(wordFileDat);            cout &lt;&lt; &quot;保存完成&quot; &lt;&lt; endl;            Sleep(500);            system(&quot;pause&quot;);            break;        &#125;        case &#39;3&#39;:        &#123;            char ans;            cout &lt;&lt; &quot;输入1，正序输出     输入2，倒序输出&quot; &lt;&lt; endl;            cin &gt;&gt; ans;            if (ans == &#39;1&#39;)            &#123;                listOfWord.print();            &#125;            else &#123;                listOfWord.resPrint();            &#125;            system(&quot;pause&quot;);            break;        &#125;        case &#39;4&#39;:        &#123;            system(&quot;pause&quot;);            break;        &#125;        case &#39;5&#39;:        &#123;            word.setAll();            if (listOfWord.find(word) == nullptr)            &#123;                cout &lt;&lt; &quot;没有找到&quot; &lt;&lt; endl;                Sleep(300);                break;            &#125;            cout &lt;&lt; listOfWord.find(word)-&gt;content;            system(&quot;pause&quot;);            break;        &#125;        case &#39;6&#39;:        &#123;            cout &lt;&lt; &quot;1按序号删除单词   2按单词中英文删除&quot; &lt;&lt; endl;            char choice;            cin &gt;&gt; choice;            if (choice == &#39;1&#39;) &#123;                cout &lt;&lt; &quot;输入序号：&quot;;                int i;                cin &gt;&gt; i;                listOfWord.remove(i);            &#125;            else if (choice == &#39;2&#39;)            &#123;                word.setAll();                listOfWord.remove(word);            &#125;            else            &#123;                cout &lt;&lt; &quot;退出&quot; &lt;&lt; endl;            &#125;            system(&quot;pause&quot;);            break;        &#125;        case &#39;7&#39;:        &#123;            cout &lt;&lt; &quot;1按序号修改单词   2按单词中英文修改&quot; &lt;&lt; endl;            char choice;            cin &gt;&gt; choice;            if (choice == &#39;1&#39;) &#123;                cout &lt;&lt; &quot;输入序号：&quot;;                int i;                cin &gt;&gt; i;                cout &lt;&lt; &quot;请输入新的单词&quot; &lt;&lt; endl;                word.setAll();                listOfWord.replace(i,word);            &#125;            else if (choice == &#39;2&#39;)            &#123;                cout &lt;&lt; &quot;请输入要修改的单词&quot; &lt;&lt; endl;                word.setAll();                cout &lt;&lt; &quot;请输入新的单词&quot; &lt;&lt; endl;                Word newWord;                newWord.setAll();                listOfWord.replace(word, newWord);            &#125;            else            &#123;                cout &lt;&lt; &quot;退出&quot; &lt;&lt; endl;            &#125;            system(&quot;pause&quot;);            break;        &#125;        case &#39;q&#39;:        case &#39;Q&#39;:        &#123;            return;        &#125;        default:        &#123;            cout &lt;&lt; &quot;请选择&quot; &lt;&lt; endl;            Sleep(500);        &#125;        &#125;    &#125;&#125;</code></pre><p>最后就是Plan类了</p><p>“plan.h”</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">pragma</span> once</span><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4996)</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"common.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;ctime></span></span><span class="token keyword">class</span> <span class="token class-name">Plan</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">char</span> title<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> description<span class="token punctuation">[</span><span class="token number">300</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> isImportant<span class="token punctuation">;</span>    <span class="token keyword">bool</span> isEmergency<span class="token punctuation">;</span>    <span class="token keyword">char</span> deadline<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> startDate<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入计划/待办标题："</span><span class="token punctuation">;</span>        cin <span class="token operator">>></span> title<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"简述计划/待办事项：（没有空格,换行用\\代替）"</span><span class="token punctuation">;</span>        cin <span class="token operator">>></span> title<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> choice<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"是否重要？（Y/N）"</span><span class="token punctuation">;</span>        cin <span class="token operator">>></span> choice<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>choice <span class="token operator">==</span> <span class="token string">'y'</span> <span class="token operator">||</span> choice <span class="token operator">==</span> <span class="token string">'Y'</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            isImportant <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            isImportant <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"是否紧急？（Y/N）"</span><span class="token punctuation">;</span>        cin <span class="token operator">>></span> choice<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>choice <span class="token operator">==</span> <span class="token string">'y'</span> <span class="token operator">||</span> choice <span class="token operator">==</span> <span class="token string">'Y'</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            isEmergency <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            isEmergency <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setStartDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        time_t now <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//当前系统的当前日期/时间</span>        <span class="token keyword">char</span><span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token function">ctime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//把 now 转换为字符串形式ctime(&amp;now);</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>startDate<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setDeadline</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入截止日期："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cin <span class="token operator">>></span> deadline<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setStartDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setDeadline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"=====================计划==================="</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"    标题："</span> <span class="token operator">&lt;&lt;</span>title <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"    简述："</span> <span class="token operator">&lt;&lt;</span> description <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"    性质："</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>isImportant<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"重要\t"</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"不重要\t"</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isEmergency<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"紧急\n"</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"不紧急\n"</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"    开始时间："</span> <span class="token operator">&lt;&lt;</span> startDate <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"    截止时间："</span> <span class="token operator">&lt;&lt;</span> deadline <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"============================================"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">friend</span> ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span> output<span class="token punctuation">,</span> Plan plan<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">friend</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span>Plan plan1<span class="token punctuation">,</span>Plan plan2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span> output<span class="token punctuation">,</span> Plan plan<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span>Plan plan1<span class="token punctuation">,</span> Plan plan2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">planMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>“plan.cpp”</p><pre><code>#include &quot;plan.h&quot;ostream&amp; operator&lt;&lt;(ostream&amp; output, Plan plan)&#123;    plan.show();    return output;&#125;bool operator==(Plan plan1, Plan plan2)&#123;    return strcmp(plan1.title, plan2.title) == 0;&#125;void planMenu()&#123;    Plan plan;    List&lt;Plan&gt; listOfPlan;    const char* planFileDat = &quot;d:\\planFile.dat&quot;;    listOfPlan.loadDatFile(planFileDat);    while (1)    &#123;        system(&quot;CLS&quot;);        char choice;        cout &lt;&lt; &quot;=======计划=======&quot; &lt;&lt; endl;        cout &lt;&lt; &quot;1.添加计划/待办&quot; &lt;&lt; endl;//        cout &lt;&lt; &quot;2.保存计划/待办&quot; &lt;&lt; endl;        cout &lt;&lt; &quot;3.浏览所有计划/待办&quot; &lt;&lt; endl;        cout &lt;&lt; &quot;4.导出计划记录本(未完成)&quot; &lt;&lt; endl;        cout &lt;&lt; &quot;5.查找计划/待办&quot; &lt;&lt; endl;        cout &lt;&lt; &quot;6.删除计划&quot; &lt;&lt; endl;        cout &lt;&lt; &quot;7.修改计划&quot; &lt;&lt; endl;        cout &lt;&lt; &quot;Q.退出&quot; &lt;&lt; endl;        cin &gt;&gt; choice;        switch (choice)        &#123;        case &#39;1&#39;:        &#123;            plan.setAll();            listOfPlan.append(plan);            system(&quot;pause&quot;);            break;        &#125;        case &#39;2&#39;:        &#123;            listOfPlan.saveDatFile(planFileDat);            cout &lt;&lt; &quot;保存完成&quot; &lt;&lt; endl;            Sleep(500);            system(&quot;pause&quot;);            break;        &#125;        case &#39;3&#39;:        &#123;            char ans;            cout &lt;&lt; &quot;输入1，正序输出     输入2，倒序输出&quot; &lt;&lt; endl;            cin &gt;&gt; ans;            if (ans == &#39;1&#39;)            &#123;                listOfPlan.print();            &#125;            else &#123;                listOfPlan.resPrint();            &#125;            system(&quot;pause&quot;);            break;        &#125;        case &#39;4&#39;:        &#123;            system(&quot;pause&quot;);            break;        &#125;        case &#39;5&#39;:        &#123;            plan.setAll();            if (listOfPlan.find(plan) == nullptr)            &#123;                cout &lt;&lt; &quot;没有找到&quot; &lt;&lt; endl;                Sleep(300);                break;            &#125;            cout &lt;&lt; listOfPlan.find(plan)-&gt;content;            system(&quot;pause&quot;);            break;        &#125;        case &#39;6&#39;:        &#123;            cout &lt;&lt; &quot;1按序号删除计划   2按单词中英文删除&quot; &lt;&lt; endl;            char choice;            cin &gt;&gt; choice;            if (choice == &#39;1&#39;) &#123;                cout &lt;&lt; &quot;输入序号：&quot;;                int i;                cin &gt;&gt; i;                listOfPlan.remove(i);            &#125;            else if (choice == &#39;2&#39;)            &#123;                plan.setAll();                listOfPlan.remove(plan);            &#125;            else            &#123;                cout &lt;&lt; &quot;退出&quot; &lt;&lt; endl;            &#125;            system(&quot;pause&quot;);            break;        &#125;        case &#39;7&#39;:        &#123;            cout &lt;&lt; &quot;1按序号修改计划   2按单词中英文修改&quot; &lt;&lt; endl;            char choice;            cin &gt;&gt; choice;            if (choice == &#39;1&#39;) &#123;                cout &lt;&lt; &quot;输入序号：&quot;;                int i;                cin &gt;&gt; i;                cout &lt;&lt; &quot;请输入新的计划&quot; &lt;&lt; endl;                plan.setAll();                listOfPlan.replace(i, plan);            &#125;            else if (choice == &#39;2&#39;)            &#123;                cout &lt;&lt; &quot;请输入要修改的计划&quot; &lt;&lt; endl;                plan.setAll();                cout &lt;&lt; &quot;请输入新的计划&quot; &lt;&lt; endl;                Plan newPlan;                newPlan.setAll();                listOfPlan.replace(plan, newPlan);            &#125;            else            &#123;                cout &lt;&lt; &quot;退出&quot; &lt;&lt; endl;            &#125;            system(&quot;pause&quot;);            break;        &#125;        case &#39;q&#39;:        case &#39;Q&#39;:        &#123;            return;//退出前调用结束模块        &#125;        default:        &#123;            cout &lt;&lt; &quot;请选择&quot; &lt;&lt; endl;            Sleep(500);        &#125;        &#125;    &#125;&#125;</code></pre><p>其实写Plan类时没有测试，不过我觉着应该没问题，大概，吧。。。。</p><p>至此三个上层建筑就已经搭建完了，因为有链表类模板，再进行扩展也是很轻松的事情。</p><p>但这三个类只能实现前三个功能，之后三个功能将在另一部分讲。</p><h2 id="第四步-对上层建筑做个总结的类（语文不好见谅）"><a href="#第四步-对上层建筑做个总结的类（语文不好见谅）" class="headerlink" title="第四步 对上层建筑做个总结的类（语文不好见谅）"></a>第四步 对上层建筑做个总结的类（语文不好见谅）</h2><p>“user.h”</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">pragma</span> once</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"common.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"plan.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"word.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"password.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"go.h"</span></span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">char</span> username<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> password<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">isUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">mainMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">welcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">goodbye</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><p>“user.cpp”</p><pre><code>#include &quot;user.h&quot;//#include &lt;string.h&gt;User::User()&#123;    strcpy(username, &quot;XXX&quot;);    strcpy(password, &quot;1234567890&quot;);&#125;bool User::isUser() &#123;    cout &lt;&lt; &quot;请输入用户名和密码&quot; &lt;&lt; endl;    cout &lt;&lt; &quot;用户名：&quot;;    char input[30];    cin &gt;&gt; input;    if (strcmp(input, username) == 0) &#123;        cout &lt;&lt; &quot;密码：&quot;;        cin &gt;&gt; input;        if (strcmp(input, password) == 0)        &#123;            return true;        &#125;        else &#123;            cout &lt;&lt; &quot;密码错误&quot; &lt;&lt; endl;            system(&quot;pause&quot;);        &#125;    &#125;    else &#123;        cout &lt;&lt; &quot;用户名错误&quot; &lt;&lt; endl;        system(&quot;pause&quot;);    &#125;    return false;&#125;void User::mainMenu() &#123;    while (1)    &#123;        system(&quot;CLS&quot;);        char choice;        cout &lt;&lt; &quot;========桌面助手========&quot; &lt;&lt; endl;        cout &lt;&lt; &quot;    1.密码管理&quot; &lt;&lt; endl;//        cout &lt;&lt; &quot;    2.计划待办&quot; &lt;&lt; endl;        cout &lt;&lt; &quot;    3.英语单词&quot; &lt;&lt; endl;        cout &lt;&lt; &quot;    4.方圆围棋&quot; &lt;&lt; endl;        cout &lt;&lt; &quot;    5.3D坦克战&quot; &lt;&lt; endl;        cout &lt;&lt; &quot;    6.聊天客户端&quot; &lt;&lt; endl;        cout &lt;&lt; &quot;    7.聊天服务端&quot; &lt;&lt; endl;        cout &lt;&lt; &quot;    Q.退出程序&quot; &lt;&lt; endl;        cin &gt;&gt; choice;        switch (choice)        &#123;        case &#39;1&#39;:        &#123;            system(&quot;CLS&quot;);            passwordMenu();            system(&quot;pause&quot;);            break;        &#125;        case &#39;2&#39;:        &#123;            system(&quot;CLS&quot;);            planMenu();            system(&quot;pause&quot;);            break;        &#125;        case &#39;3&#39;:        &#123;            system(&quot;CLS&quot;);            wordMenu();            system(&quot;pause&quot;);            break;        &#125;        case &#39;4&#39;:        &#123;            system(&quot;CLS&quot;);            Go();            system(&quot;pause&quot;);            break;        &#125;        case &#39;5&#39;:        &#123;            system(&quot;CLS&quot;);            system(&quot;start C:\\Users\\Thinkpad\\Desktop\\课外学习\\自制3D坦克大战游戏\\myTankGame.exe&quot;);            system(&quot;pause&quot;);            break;        &#125;        case &#39;6&#39;:        &#123;            system(&quot;CLS&quot;);            system(&quot;start C:\\Users\\Thinkpad\\source\\repos\\SecurityChat\\Debug\\client.exe&quot;);            system(&quot;pause&quot;);            break;        &#125;        case &#39;7&#39;:        &#123;            system(&quot;CLS&quot;);            system(&quot;start C:\\Users\\Thinkpad\\source\\repos\\SecurityChat\\Debug\\server.exe&quot;);            system(&quot;pause&quot;);            break;        &#125;        case &#39;q&#39;:        case &#39;Q&#39;:        &#123;            return;        &#125;        default:        &#123;            cout &lt;&lt; &quot;请选择&quot; &lt;&lt; endl;            Sleep(500);        &#125;        &#125;    &#125;&#125;void User::welcome() &#123;    cout &lt;&lt; &quot;欢迎大王回来&quot; &lt;&lt; endl;    //此处可以添加函数来设置控制台样子，字体样式等等    system(&quot;pause&quot;);    mainMenu();&#125;void User::goodbye() &#123;    cout &lt;&lt; &quot;唉，真无奈，今天我竟然还是如此的聪明，帅气，天下无敌。&quot; &lt;&lt; endl;    cout &lt;&lt; &quot;Goodbye&quot; &lt;&lt; endl;    system(&quot;pause&quot;);&#125;</code></pre><p>做完了这个类，我们就只需要用一个User类就够了，接下来就是main()函数了</p><h2 id="第五步-main-cpp"><a href="#第五步-main-cpp" class="headerlink" title="第五步 main.cpp"></a>第五步 main.cpp</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//命名：驼峰式</span><span class="token comment" spellcheck="true">//类名大写字母开头</span><span class="token comment" spellcheck="true">//函数和成员都是小写字母开头</span><span class="token comment" spellcheck="true">//bool命名一定是is....</span><span class="token comment" spellcheck="true">//文件名全小写</span><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4996)</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"user.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    User user<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">isUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">welcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">goodbye</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>补充一下，之前代码中看到的“common.h”</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">pragma</span> once</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;Windows.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"list.h"</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></code></pre><p>用处就是把很多文件共有的东西提出来放一起，这样只用写一份就够了</p><p>用的IDE是Visual Studio 2019，编译完成后没有错误和警告，简单的测试也没问题。不过没有特别细致的测试，说不定会有什么严重的BUG。</p><h2 id="第六步-聊天室的开发"><a href="#第六步-聊天室的开发" class="headerlink" title="第六步 聊天室的开发"></a>第六步 聊天室的开发</h2><p>我用的方法是B站搜索聊天室，然后会有很多教程，跟着做一做就OK了，看不懂再换一个，网上资源很丰富。其实一开始的目标是用自己的加密算法加密聊天信息，并且实现外网的聊天。但是因为要准备考试，还有N多作业要做，精力不够就没做下去。。。。</p><p>此外这里比较令我惊奇的是改一下头文件的先后顺序就会出现很多错误，我对这个事情还做了几次实验，但也没弄明白怎么回事，总之非常玄学。</p><h2 id="第七步-3D坦克大战的开发"><a href="#第七步-3D坦克大战的开发" class="headerlink" title="第七步 3D坦克大战的开发"></a>第七步 3D坦克大战的开发</h2><p>首先要下一个unity, 了解一下C#，接着B站搜索相关教程。（PS，官网上有这个3D坦克大战的教程，而且提供模型和声音，动画资源）。剩下的就是折腾了。生命在于折腾。如何折腾比较靠谱请参阅官方教程以及B站的N多教程。</p><h2 id="第八步-方圆围棋"><a href="#第八步-方圆围棋" class="headerlink" title="第八步 方圆围棋"></a>第八步 方圆围棋</h2><p>这块也是直接迁移以前的程序。当时是初学，对GUI有执念，找到了easyX和网上的教程做的。网上资源很丰富，如果GUI不能满足你，我推荐用UE4做个3D效果的围棋程序。在B站上有人发过UE4做的3D效果的围棋，可以搜到，可以在那里学习。</p><p>虽然说是围棋，其实只弄了个壳子，并没有实现提子，数气，判断胜负。一些函数也没有写好，围棋这部分也是直接从以前写的程序里搬过来的，参考的B站上的教程，所以B站真是个学习网站，好东西不少。注意，这部分要求在目录里有一张名字为“1.jpg”的背景图片，大家可以按照自己的爱好画一画。此外在选择方圆围棋功能后会导致控制台被关闭，其实也有方法解决这个问题，大家可以百度一下如何解决，这里就不解决了，因为我也累了。另外这里用到了easyX（就是“&lt;graphics.h&gt;”），不知道easyX或者没有的可以百度一下下载一个，过程很简单，我就不细说了。</p><p>“go.h”</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">pragma</span> once</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;windows.h></span></span><span class="token macro property">#<span class="token directive keyword">pragma</span> comment (lib,"winmm.lib")</span><span class="token keyword">int</span> <span class="token function">Go</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">initGo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化</span><span class="token keyword">void</span> <span class="token function">playGo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//运行游戏</span><span class="token keyword">void</span> <span class="token function">death</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//检查棋子的死活</span></code></pre><p>“go.cpp”</p><pre><code>#include &quot;go.h&quot;#include &lt;graphics.h&gt;using namespace std;IMAGE img;int board[20][20] = &#123; 0 &#125;;//0没有棋子int Go()&#123;    initGo();    playGo();    return 0;&#125;void initGo()&#123;    //创建一个窗口    initgraph(1132, 597);    loadimage(NULL, L&quot;1.jpg&quot;);    setlinecolor(BLACK);    for (int i = 0; i &lt; 20; i++)    &#123;        line(0, i * 25, 500, i * 25);        line(i * 25, 0, i * 25, 500);    &#125;    //画一条粗的边框线    //法一：设置宽度    setlinestyle(PS_SOLID, 3);    line(500, 0, 500, 500);    line(0, 500, 500, 500);    //输出说明介绍    outtextxy(510, 80, L&quot;Player 1: 黑棋&quot;);    outtextxy(510, 120, L&quot;Player 2: 白棋&quot;);    outtextxy(510, 200, L&quot;退出游戏&quot;);&#125;void playGo()&#123;    //鼠标    MOUSEMSG m;//保存鼠标消息    int x = 0, y = 0, a = 0, b = 0;    int count = 0;    while (1)    &#123;        m = GetMouseMsg();//获取鼠标消息        for (int i = 1; i &lt; 20; i++)        &#123;            for (int j = 1; j &lt; 20; j++)            &#123;                if (abs(m.x - i * 25) &lt; 12 &amp;&amp; abs(m.y - j * 25) &lt; 12)                &#123;                    x = i * 25;                    y = j * 25;                    a = i;                    b = j;                &#125;            &#125;        &#125;        //鼠标左键按下        if (m.uMsg == WM_LBUTTONDOWN &amp;&amp; m.x / 25 * 25 &lt;= 500 &amp;&amp; m.y / 25 * 25 &lt;= 500)        &#123;            if (board[a][b] != 0)            &#123;                MessageBox(NULL, L&quot;这里已经有棋子了&quot;, L&quot;提示&quot;, MB_OK);                continue;            &#125;            if (count % 2 == 0)            &#123;                setfillcolor(BLACK);                solidcircle(x, y, 10);                board[a][b] = 1;            &#125;            else            &#123;                setfillcolor(WHITE);                solidcircle(x, y, 10);                board[a][b] = -1;            &#125;            count++;        &#125;        outtextxy(510, 250, L&quot;一次循环&quot;);        if (m.uMsg == WM_LBUTTONDOWN &amp;&amp; abs(m.x - 510) &lt; 20 &amp;&amp; abs(m.y - 200) &lt; 20)        &#123;            outtextxy(510, 250, L&quot;点击到了&quot;);            break;        &#125;    &#125;    return;&#125;</code></pre><p>到这里程序就结束了，还不满足的可以尝试制作二维码程序，实现扫码，和生成二维码。这个在github上有很多教程和范例可以参考，还有学长在github上放出来二维码的项目，为学弟学妹们扫清道路。B站up回形针的视频也有对二维码的简单介绍。教程多数用Qt的。</p><h2 id="二-文件结构"><a href="#二-文件结构" class="headerlink" title="二  文件结构"></a>二  文件结构</h2><p>估计这么长，大家应该是直接不看了或者直接翻到底吧。</p><p><img src="https://pic2.zhimg.com/v2-0ba02b67871c6574caf6d5523af2da35_b.gif" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 大一 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
